@page "/"
@using System.Net.Http.Json
@inject IHttpClientFactory HttpClientFactory

<h1>Task Manager</h1>

<div class="mb-3">
    <input @bind="newTaskDescription" class="form-control" placeholder="Enter a new task" />
    <button @onclick="AddTask" class="btn btn-primary mt-2">Add Task</button>
</div>

@if (tasks == null)
{
    <p>Loading...</p>
}
else
{
    <ul class="list-group">
        @foreach (var task in tasks)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span class="@(task.IsCompleted ? "text-decoration-line-through" : "")">
                    @task.Description
                </span>
                <button @onclick="() => ToggleTask(task)" class="btn btn-sm btn-success">
                    @(task.IsCompleted ? "Undo" : "Complete")
                </button>
            </li>
        }
    </ul>
}

@code {
    private List<TaskItem> tasks = null!;
    private string newTaskDescription = "";

    public record TaskItem(string Id, string Description, bool IsCompleted);

    protected override async Task OnInitializedAsync()
    {
        var http = HttpClientFactory.CreateClient("TaskApi");
        tasks = await http.GetFromJsonAsync<List<TaskItem>>("tasks") ?? new List<TaskItem>();
    }

    private async Task AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTaskDescription))
        {
            var newTask = new TaskItem(Guid.NewGuid().ToString(), newTaskDescription, false);
            var http = HttpClientFactory.CreateClient("TaskApi");
            await http.PostAsJsonAsync("tasks", newTask);
            tasks.Add(newTask);
            newTaskDescription = "";
        }
    }

    private async Task ToggleTask(TaskItem task)
    {
        task = task with { IsCompleted = !task.IsCompleted };
        var http = HttpClientFactory.CreateClient("TaskApi");
        await http.PutAsJsonAsync($"tasks/{task.Id}", task);
        tasks = tasks.Select(t => t.Id == task.Id ? task : t).ToList();
    }
}